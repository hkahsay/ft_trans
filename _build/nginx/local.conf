upstream front {
    server frontend:5173;
}

upstream back {
    server backend:8000;
}

upstream adminer {
    server adminer:8080;
}


server {

    listen      443 ssl;
    listen  [::]:443 ssl;

    server_name localhost;

    ssl_certificate /etc/nginx/certs/transcendence.crt;
    ssl_certificate_key /etc/nginx/certs/transcendence.key;

    location / {
        proxy_pass http://front;

        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $host;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    location /api/ {
        rewrite /api/(.*) /$1 break;
        proxy_pass http://back;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $http_x_real_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /admin/ {
        proxy_pass http://back;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $http_x_real_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /static/admin/ {
        proxy_pass http://back;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $http_x_real_ip;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/ {
        proxy_pass http://back;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        # the CORS headers won't affect the WebSocket handshake
    }

    location /adminer/ {
        rewrite /adminer/(.*) /$1 break;
        proxy_pass http://adminer;
    }
}

# Redirect HTTP to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name localhost;
    return 301 https://$server_name$request_uri;
}